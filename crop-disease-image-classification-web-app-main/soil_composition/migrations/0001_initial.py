# Generated by Django 5.0.6 on 2025-05-13 08:52

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='SoilUnit',
            fields=[
                ('site_id', models.IntegerField(primary_key=True, serialize=False)),
                ('area', models.FloatField(help_text='Area in km²')),
                ('perimeter', models.FloatField(help_text='Perimeter in km')),
                ('landform', models.CharField(max_length=10)),
                ('lithology', models.CharField(max_length=10)),
                ('dominant_fao_group', models.CharField(max_length=10)),
                ('longitude', models.FloatField()),
                ('latitude', models.FloatField()),
                ('geometry', models.TextField(help_text='Polygon geometry (e.g., WKT or GeoJSON)')),
            ],
        ),
        migrations.CreateModel(
            name='SoilParams',
            fields=[
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='soil_composition.soilunit')),
                ('coarse_fragments', models.IntegerField(help_text='Coarse fragments (%)')),
                ('bulk_density', models.FloatField(help_text='Bulk density (kg/dm³)')),
                ('water_capacity', models.IntegerField(help_text='Total available water capacity (cm³/cm³)')),
                ('cation_exchange_capacity', models.IntegerField(help_text='Cation exchange capacity (cmolc/kg)')),
                ('base_saturation', models.IntegerField(help_text='Base saturation (%)')),
                ('exchangeable_sodium', models.IntegerField(help_text='Exchangeable sodium percentage (%)')),
                ('ph', models.FloatField()),
                ('carbonate_equivalent', models.FloatField(help_text='Total carbonate equivalent (g/kg)')),
                ('gypsum_content', models.FloatField(help_text='Gypsum content (g/kg)')),
                ('electrical_conductivity', models.FloatField(help_text='Electrical conductivity (dS/m)')),
                ('organic_carbon', models.FloatField(help_text='Total organic carbon (g/kg)')),
                ('total_nitrogen', models.FloatField(help_text='Total nitrogen (g/kg)')),
                ('effective_cation_exchange_capacity', models.FloatField(help_text='Effective CEC (cmolc/kg)')),
                ('aluminum_saturation', models.IntegerField(help_text='Aluminum saturation (%)')),
                ('longitude', models.FloatField()),
                ('latitude', models.FloatField()),
                ('geometry', models.TextField(help_text='Polygon geometry (e.g., WKT or GeoJSON)')),
            ],
        ),
        migrations.CreateModel(
            name='SoilSoter',
            fields=[
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='soil_composition.soilunit')),
                ('area', models.FloatField(help_text='Area in square kilometers')),
                ('perimeter', models.FloatField(help_text='Perimeter in kilometers')),
                ('median_elevation', models.IntegerField()),
                ('median_slope', models.FloatField()),
                ('median_relief', models.IntegerField()),
                ('geometry', models.TextField(help_text='Polygon geometry (e.g., WKT or GeoJSON)')),
            ],
        ),
    ]
